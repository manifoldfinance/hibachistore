import chai, { expect } from "chai";
import { MaxUint256 } from "ethers/constants";
import { BigNumber, bigNumberify, defaultAbiCoder, formatEther, parseEther } from "ethers/utils";
import { solidity, MockProvider, createFixtureLoader, deployContract } from "ethereum-waffle";
import { expandTo18Decimals } from "./shared/utilities";
import { v2Fixture } from "./shared/fixtures";
import HibachiArbitrage from "../build/HibachiArbitrage.json";
import { Contract } from "ethers";

chai.use(solidity);

const overrides = {
  gasLimit: 9999999,
  gasPrice: 0,
};

describe("HibachiArbitrage", () => {
  const provider = new MockProvider({
    hardfork: "istanbul",
    mnemonic: "horn horn horn horn horn horn horn horn horn horn horn horn",
    gasLimit: 9999999,
  });

  const [wallet] = provider.getWallets();
  const loadFixture = createFixtureLoader(provider, [wallet]);
  let globalFixtures: any;
  let WETH: Contract;
  let WETHPartner: Contract;
  let WETHExchangeV1: Contract;
  let WETHPair: Contract;
  let hibachiArbitrage: Contract;
  let V2Router: Contract;
  beforeEach(async function() {
    const fixture = await loadFixture(v2Fixture);

    WETH = fixture.WETH;
    WETHPartner = fixture.WETHPartner;
    WETHExchangeV1 = fixture.WETHExchangeV1;
    WETHPair = fixture.WETHPair;
    V2Router = fixture.router;
    hibachiArbitrage = await deployContract(
      wallet,
      HibachiArbitrage,
      [fixture.factoryV2.address, fixture.factoryV1.address, fixture.router.address, fixture.router.address],
      overrides,
    );
    globalFixtures = fixture;
  });
  it("HibachiShop: Eth => Token swap", async () => {
    // add liquidity to V1 at a rate of 1 ETH / 200 X
    const WETHPartnerAmountV1 = expandTo18Decimals(200);
    const ETHAmountV1 = expandTo18Decimals(1);
    await WETHPartner.approve(WETHExchangeV1.address, WETHPartnerAmountV1);
    await WETHExchangeV1.addLiquidity(bigNumberify(1), WETHPartnerAmountV1, MaxUint256, {
      ...overrides,
      value: ETHAmountV1,
    });

    // add liquidity to V2 at a rate of 1 ETH / 200 X
    const WETHPartnerAmountV2 = expandTo18Decimals(200);
    const ETHAmountV2 = expandTo18Decimals(1);
    await WETHPartner.transfer(WETHPair.address, WETHPartnerAmountV2);
    await WETH.deposit({ value: ETHAmountV2 });
    await WETH.transfer(WETHPair.address, ETHAmountV2);
    await WETHPair.mint(wallet.address, overrides);
    const WETHPairToken0 = await WETHPair.token0();
    const balanceBefore = await provider.getBalance(wallet.address);
    const reservesV1B = [
      await WETHPartner.balanceOf(WETHExchangeV1.address),
      await provider.getBalance(WETHExchangeV1.address),
    ];

    const priceV1B = reservesV1B[0].div(reservesV1B[1]);
    const reservesV2B = (await WETHPair.getReserves()).slice(0, 2);
    const priceV2B =
      WETHPairToken0 === WETHPartner.address ? reservesV2B[0].div(reservesV2B[1]) : reservesV2B[1].div(reservesV2B[0]);

    console.log("UniswapV1: 1/" + priceV1B.toString() + "UniswapV2: 1/" + priceV2B.toString());
    console.log("user holdings after everything listed below");

    console.log(
      "eth:" +
        formatEther(await provider.getBalance(wallet.address)) +
        "weth: " +
        formatEther(await WETH.balanceOf(wallet.address)) +
        "wethPartner:" +
        formatEther(await WETHPartner.balanceOf(wallet.address)),
    );

    console.log("hibachi shop holdings");
    console.log(
      "eth:" +
        formatEther(await provider.getBalance(hibachiArbitrage.address)) +
        "weth: " +
        formatEther(await WETH.balanceOf(hibachiArbitrage.address)) +
        "wethPartner:" +
        formatEther(await WETHPartner.balanceOf(hibachiArbitrage.address)),
    );

    await hibachiArbitrage.EthToTokenSwap(WETHPartner.address, MaxUint256, 1, parseEther("0.001"), true, false, {
      ...overrides,
      value: parseEther("0.1"),
    });

    const balanceAfter = await provider.getBalance(wallet.address);
    const profit = balanceAfter.sub(balanceBefore);
    const reservesV1 = [
      await WETHPartner.balanceOf(WETHExchangeV1.address),
      await provider.getBalance(WETHExchangeV1.address),
    ];
    const priceV1 = reservesV1[0].div(reservesV1[1]);
    const reservesV2 = (await WETHPair.getReserves()).slice(0, 2);
    const priceV2 =
      WETHPairToken0 === WETHPartner.address ? reservesV2[0].div(reservesV2[1]) : reservesV2[1].div(reservesV2[0]);

    var balanceOfHibachiShop = await provider.getBalance(hibachiArbitrage.address);
    console.log("UniswapV1: 1/" + priceV1.toString() + "UniswapV2: 1/" + priceV2.toString());
    console.log("user holdings before everything listed below");
    console.log(
      "eth:" +
        formatEther(await provider.getBalance(wallet.address)) +
        "weth: " +
        formatEther(await WETH.balanceOf(wallet.address)) +
        "wethPartner:" +
        formatEther(await WETHPartner.balanceOf(wallet.address)),
    );
    console.log("hibachi shop holdings after everything");
    console.log(
      "eth:" +
        formatEther(await provider.getBalance(hibachiArbitrage.address)) +
        "weth: " +
        formatEther(await WETH.balanceOf(hibachiArbitrage.address)) +
        "wethPartner:" +
        formatEther(await WETHPartner.balanceOf(hibachiArbitrage.address)),
    );
  });
  // it('HibachiShop: Token => ETH swap', async () => {
  //   // add liquidity to V1 at a rate of 1 ETH / 200 X
  //   const WETHPartnerAmountV1 = expandTo18Decimals(2000)
  //   const ETHAmountV1 = expandTo18Decimals(10)
  //   await WETHPartner.approve(WETHExchangeV1.address, WETHPartnerAmountV1)
  //   await WETHExchangeV1.addLiquidity(bigNumberify(1), WETHPartnerAmountV1, MaxUint256, {
  //     ...overrides,
  //     value: ETHAmountV1,
  //   })

  //   // add liquidity to V2 at a rate of 1 ETH / 200 X
  //   const WETHPartnerAmountV2 = expandTo18Decimals(4000)
  //   const ETHAmountV2 = expandTo18Decimals(20)
  //   await WETHPartner.transfer(WETHPair.address, WETHPartnerAmountV2)
  //   await WETH.deposit({ value: ETHAmountV2 })
  //   await WETH.transfer(WETHPair.address, ETHAmountV2)
  //   await WETHPair.mint(wallet.address, overrides)

  //   const balanceBefore = await provider.getBalance(wallet.address)
  //   console.log('UniswapV1: 1/200 UniswapV2: 1/200')
  //   console.log('user holdings after everything listed below')

  //   console.log(
  //     'eth:' +
  //       formatEther(await provider.getBalance(wallet.address)) +
  //       'weth: ' +
  //       formatEther(await WETH.balanceOf(wallet.address)) +
  //       'wethPartner:' +
  //       formatEther(await WETHPartner.balanceOf(wallet.address))
  //   )

  //   console.log('hibachi shop holdings')
  //   console.log(
  //     'eth:' +
  //       formatEther(await provider.getBalance(hibachiArbitrage.address)) +
  //       'weth: ' +
  //       formatEther(await WETH.balanceOf(hibachiArbitrage.address)) +
  //       'wethPartner:' +
  //       formatEther(await WETHPartner.balanceOf(hibachiArbitrage.address))
  //   )

  //   const WETHPairToken0 = await WETHPair.token0()
  //   await hibachiArbitrage.TokenToEthSwap(WETHPartner.address, expandTo18Decimals(400), MaxUint256, 1, 1, true)

  //   const balanceAfter = await provider.getBalance(wallet.address)
  //   const profit = balanceAfter.sub(balanceBefore)
  //   const reservesV1 = [
  //     await WETHPartner.balanceOf(WETHExchangeV1.address),
  //     await provider.getBalance(WETHExchangeV1.address),
  //   ]
  //   const priceV1 = reservesV1[0].div(reservesV1[1])
  //   const reservesV2 = (await WETHPair.getReserves()).slice(0, 2)
  //   const priceV2 =
  //     WETHPairToken0 === WETHPartner.address ? reservesV2[0].div(reservesV2[1]) : reservesV2[1].div(reservesV2[0])

  //   var balanceOfHibachiShop = await provider.getBalance(hibachiArbitrage.address)
  //   console.log('UniswapV1: 1/' + priceV1.toString() + 'UniswapV2: 1/' + priceV2.toString())
  //   console.log('user holdings before everything listed below')
  //   console.log(
  //     'eth:' +
  //       formatEther(await provider.getBalance(wallet.address)) +
  //       'weth: ' +
  //       formatEther(await WETH.balanceOf(wallet.address)) +
  //       'wethPartner:' +
  //       formatEther(await WETHPartner.balanceOf(wallet.address))
  //   )
  //   console.log('hibachi shop holdings after everything')
  //   console.log(
  //     'eth:' +
  //       formatEther(await provider.getBalance(hibachiArbitrage.address)) +
  //       'weth: ' +
  //       formatEther(await WETH.balanceOf(hibachiArbitrage.address)) +
  //       'wethPartner:' +
  //       formatEther(await WETHPartner.balanceOf(hibachiArbitrage.address))
  //   )
  // })
});

async function getAddressHoldings(fixtures: any, provider: any, weth: any, wethPartner: any, userAddress: any) {
  var ethHoldings = await provider.getBalance(userAddress);
  var wethHoldings = await fixtures.WETH.balanceOf(weth);
  var wethPartnerHoldings = await fixtures.WETHPartner.balanceOf(wethPartner);
  return [formatEther(ethHoldings), formatEther(wethHoldings), formatEther(wethPartnerHoldings)];
}
